nclude<stdio.h>
#include<ctype.h>
#define MAX 100
struct stack
{
        char a[MAX];
        int top;
}s;
void init()
{
        s.top=-1;
}
int isempty()
{
        if(s.top==-1)
          return 1;
        else
          return 0;
}
int isfull()
{
        if(s.top==MAX-1)
          return 1;
        else
          return 0;
}
void push(char x)
{
        if(isfull())
          printf("stack is full don't push");
        else
          {
            s.top++;
            s.a[s.top]=x;
          }
}
char pop()
{
        char ch;
          if(isempty())
            printf("stack is empty dont pop:");
          else
            {
              ch=s.a[s.top];
              s.top--;
              return ch;
            }
}
int priority(char x)
{
        if(x=='(')
        return 0;
        if(x=='+' || x=='-')
          return 1;
        if(x=='*' || x=='/')
          return 2;
        if(x=='$' || x=='^')
          return 3;
}
int main()
{
        char s1[20],ch;
        int i;
          printf("Enter The Infix Epression:");
          scanf("%s",&s1);
          printf("\n");
        init();
        printf("\n postfix expression :");
        for(i=0;s1[i]!='\0';i++)
        {
            if(isalpha(s1[i]))
              printf("%c",s1[i]);
            else if(s1[i]=='(')
              push(s1[i]);
            else if(s1[i]==')')
             {
               while((ch=pop())!='(')
                 printf("%c",ch);
             }
             else
             {
           while(priority(s.a[s.top])>=priority(s1[i]))
        {
             printf("%c",pop());
         }
            push(s1[i]);
           }
}
          while(!isempty())
           {
             printf("%c",pop());
           }
         }

